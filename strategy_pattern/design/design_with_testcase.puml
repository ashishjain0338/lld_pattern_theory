@startuml Navigation_With_Route_Strategy_And_Testcase
title Strategy Pattern - Navigation with Route Strategy Example Along with Testcase setup
class TestCaseExecutor{
    -readerObj: TestCaseReader
    -runnerObj : TestCaseRunner
    +execute
}

TestCaseExecutor *-- TestCaseReader
TestCaseExecutor *-- TestCaseRunner
abstract TestCaseReader{
    +setup_config()
    +readNextLine()
}

class TextFileReader extends TestCaseReader{
    +setup_config()
    +readNextLine()
}

class UserInput extends TestCaseReader{
    +setup_config()
    +readNextLine()
}

abstract class TestCaseRunner{
    +addressSingleLine()
}

class StrategyPatternTestCaseRunner extends TestCaseRunner{
    -state : HashMap<String, Navigation>

    +address_line()
    -showState()
    -addUser()
    -removeUser()
    -changeRouteStrategy()
    -navigate()
}

abstract class Navigation{
    +rtStrategy : RouteStrategy
    +navigate()
    +changeRouteStrategy()
}

class BikeNavigation extends Navigation{
    +navigate()
}

class CarNavigation extends Navigation{
}

class WalkNavigation extends Navigation{
    +navigate()
}

abstract class RouteStrategy{
    +navigate()
    +estimateTimeOfArrival()
}

class ScenicTimeRouteFinding extends RouteStrategy{
    +navigate()
    +estimateTimeOfArrival()
}

class ShortestDistanceRouteFinding extends RouteStrategy{
    +navigate()
    +estimateTimeOfArrival()
}

class ShortestTimeRouteFinding extends RouteStrategy{
    +navigate()
    +estimateTimeOfArrival()
}

class RouteStrategyFactory{
    +getRouteObj()
}

Navigation *-- RouteStrategy : has-a
RouteStrategyFactory --> RouteStrategy : creates
Navigation --> RouteStrategyFactory : getRouteObj
StrategyPatternTestCaseRunner --> Navigation : uses
@enduml